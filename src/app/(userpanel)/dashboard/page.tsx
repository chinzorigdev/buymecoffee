"use client";

import { useState, useEffect, useRef } from "react";
import { useSession, signOut } from "next-auth/react";
import Image from "next/image";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import {
  Menu,
  Home,
  Users,
  Heart,
  TrendingUp,
  MessageCircle,
  Settings,
  LogOut,
  ArrowDown,
  Share,
  PanelsTopLeft,
  ExternalLink,
  Coffee,
  User,
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

// –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–Ω —Ç”©—Ä”©–ª
interface UserData {
  id: string;
  username: string;
  email: string;
  name: string;
  about?: string;
  website?: string;
  profileImage?: string;
  coffeePrice: number;
  totalCoffees: number;
  totalEarnings: number;
}

export default function Dashboard() {
  const { data: session, status } = useSession();
  const [activePage, setActivePage] = useState("dashboard");
  const [userData, setUserData] = useState<UserData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  // Dropdown toggle function
  const toggleDropdown = () => {
    setIsDropdownOpen(!isDropdownOpen);
  };

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setIsDropdownOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // Profile menu handlers
  const handleDashboard = () => {
    setIsDropdownOpen(false);
    // Already on dashboard, just scroll to top
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  const handleLogout = async () => {
    setIsDropdownOpen(false);
    await signOut({ callbackUrl: "/" });
  };
  // MongoDB-–æ–æ—Å —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
  useEffect(() => {
    async function fetchUserData() {
      if (status === "authenticated" && session?.user?.id) {
        try {
          console.log("üìä –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª —Ç–∞—Ç–∞–∂ –±–∞–π–Ω–∞...");

          const response = await fetch("/api/user/update-profile");
          if (response.ok) {
            const data = await response.json();
            setUserData(data.user);
            console.log("‚úÖ –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –∞–≤–ª–∞–∞:", data.user);          } else {
            const errorData = await response.json();
            console.error(
              "‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:",
              errorData.message
            );

            // –•—ç—Ä—ç–≤ authentication –∞–ª–¥–∞–∞ –±–æ–ª signin —Ö—É—É–¥–∞—Å —Ä—É—É —à–∏–ª–∂“Ø“Ø–ª—ç—Ö
            if (response.status === 401) {
              console.log(
                "üîê Session –¥—É—É—Å—Å–∞–Ω –±–∞–π–Ω–∞, signin —Ö—É—É–¥–∞—Å —Ä—É—É —à–∏–ª–∂“Ø“Ø–ª–∂ –±–∞–π–Ω–∞..."
              );
              window.location.href = "/signin";
              return;
            }
            
            // –•—ç—Ä—ç–≤ —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π –±–æ–ª session —Ü—ç–≤—ç—Ä–ª—ç—ç–¥ signin —Ä—É—É —à–∏–ª–∂“Ø“Ø–ª—ç—Ö
            if (response.status === 404) {
              console.log(
                "üîç –•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π. Session —Ü—ç–≤—ç—Ä–ª—ç–∂ –±–∞–π–Ω–∞..."
              );
              await signOut({ callbackUrl: "/signin" });
              return;
            }
          }        } catch (error) {
          console.error("‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:", error);
          
          // Network —ç—Å–≤—ç–ª –±—É—Å–∞–¥ –∞–ª–¥–∞–∞–Ω—ã —Ö—É–≤—å–¥ session —Ü—ç–≤—ç—Ä–ª—ç—Ö
          if (error instanceof TypeError && error.message.includes('Failed to fetch')) {
            console.log("üåê –°“Ø–ª–∂—ç—ç–Ω–∏–π –∞–ª–¥–∞–∞ –±–∞–π–Ω–∞");
          } else {
            console.log("üîÑ –¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π –∞–ª–¥–∞–∞. Session —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...");
            await signOut({ callbackUrl: "/signin" });
            return;
          }
        } finally {
          setIsLoading(false);
        }
      } else if (status === "unauthenticated") {
        // –•—ç—Ä—ç–≤ session –±–∞–π—Ö–≥“Ø–π –±–æ–ª loading-–≥ –∑–æ–≥—Å–æ–æ–∂ signin —Ä—É—É —à–∏–ª–∂“Ø“Ø–ª—ç—Ö
        setIsLoading(false);
        console.log(
          "‚ùå –ù—ç–≤—Ç—Ä—ç—ç–≥“Ø–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á, signin —Ö—É—É–¥–∞—Å —Ä—É—É —à–∏–ª–∂“Ø“Ø–ª–∂ –±–∞–π–Ω–∞..."
        );
        window.location.href = "/signin";
      } else if (status === "loading") {
        // Session loading –±–∞–π—Ö “Ø–µ–¥ —Ö“Ø–ª—ç—ç—Ö
        console.log("‚è≥ Session –∞—á–∞–∞–ª–ª–∞–∂ –±–∞–π–Ω–∞...");
      }
    }

    fetchUserData();
  }, [session, status]);
  // Authentication —à–∞–ª–≥–∞–ª—Ç
  if (status === "loading") {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-yellow-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">–ê—á–∞–∞–ª–ª–∞–∂ –±–∞–π–Ω–∞...</p>
        </div>
      </div>
    );
  }

  if (status === "unauthenticated" || !session?.user) {
    // Client —Ç–∞–ª–¥ redirect —Ö–∏–π—Ö –Ω—å –∏–ª“Ø“Ø —Ç–æ–≥—Ç–≤–æ—Ä—Ç–æ–π
    if (typeof window !== "undefined") {
      window.location.href = "/signin";
    }
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-yellow-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">–ù—ç–≤—Ç—Ä—ç—Ö —Ö—É—É–¥–∞—Å —Ä—É—É —à–∏–ª–∂“Ø“Ø–ª–∂ –±–∞–π–Ω–∞...</p>
        </div>
      </div>
    );
  }

  // Debug: Session –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —à–∞–ª–≥–∞—Ö
  console.log("Session data:", session);
  console.log("Username:", session?.user?.username);

  const recentSupporters = [
    {
      name: "–ë–æ–ª–¥–±–∞–∞—Ç–∞—Ä",
      amount: "‚ÇÆ50,000",
      message: "–¢–∞–Ω—ã –∞–∂–∏–ª–¥ –∏—Ö —Ç–∞–ª–∞—Ä—Ö–∞–∂ –±–∞–π–Ω–∞! üôå",
      time: "2 —Ü–∞–≥–∏–π–Ω ”©–º–Ω”©",
      avatar: "B",
    },
    {
      name: "–°—ç—Ü—ç–Ω–≥—ç—Ä—ç–ª",
      amount: "‚ÇÆ25,000",
      message: "–ö–æ—Ñ–µ —É—É–≥–∞–∞—Ä–∞–π ‚òï",
      time: "5 —Ü–∞–≥–∏–π–Ω ”©–º–Ω”©",
      avatar: "–°",
    },
    {
      name: "–ú”©–Ω—Ö–±–∞—è—Ä",
      amount: "‚ÇÆ100,000",
      message: "–¢–∞ –º–∞—à —Å–∞–π—Ö–∞–Ω –∞–∂–∏–ª —Ö–∏–π–∂ –±–∞–π–Ω–∞!",
      time: "1 ”©–¥—Ä–∏–π–Ω ”©–º–Ω”©",
      avatar: "–ú",
    },
    {
      name: "–¶—ç—Ü—ç–≥–º–∞–∞",
      amount: "‚ÇÆ15,000",
      message: "–î—ç–º–∂—å–µ! üí™",
      time: "2 ”©–¥—Ä–∏–π–Ω ”©–º–Ω”©",
      avatar: "–¶",
    },
  ];
  const sidebarItems = [
    { id: "dashboard", label: "–£–¥–∏—Ä–¥–ª–∞–≥—ã–Ω —Å–∞–º–±–∞—Ä", icon: Home },
    {
      id: "viewpage",
      label: "–•—É—É–¥–∞—Å —Ö–∞—Ä–∞—Ö",
      icon: PanelsTopLeft,
      externalIcon: ExternalLink,
    },
    { id: "supporters", label: "–î—ç–º–∂–∏–≥—á–∏–¥", icon: Users },
    { id: "donations", label: "–•–∞–Ω–¥–∏–≤", icon: Heart },
    { id: "analytics", label: "–®–∏–Ω–∂–∏–ª–≥—ç—ç", icon: TrendingUp },
    { id: "messages", label: "–ó—É—Ä–≤–∞—Å", icon: MessageCircle },
    { id: "settings", label: "–¢–æ—Ö–∏—Ä–≥–æ–æ", icon: Settings },
  ];

  const SidebarContent = ({
    onItemClick,
  }: {
    onItemClick?: (id: string) => void;
  }) => (
    <div className="flex flex-col h-full">
      <div className="p-6 border-b">
        <h2 className="text-lg font-semibold text-gray-900">
          Coffee Dashboard
        </h2>
        <p className="text-sm text-gray-600">–£–¥–∏—Ä–¥–ª–∞–≥—ã–Ω —Å–∞–º–±–∞—Ä</p>
      </div>{" "}
      <nav className="flex-1 p-4 space-y-2">
        {sidebarItems.map((item) => (
          <Button
            key={item.id}
            variant={activePage === item.id ? "default" : "ghost"}
            className={`w-full justify-start ${
              activePage === item.id
                ? "bg-yellow-500 text-white hover:bg-yellow-600"
                : "text-gray-700 hover:text-gray-900 hover:bg-gray-100"
            }`}
            onClick={() => {
              if (item.id === "viewpage") {
                // –ù—ç–≤—Ç—ç—Ä—Å—ç–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ö—É—É–¥—Å—ã–≥ —à–∏–Ω—ç tab-–¥ –Ω—ç—ç—Ö
                if (session?.user?.username) {
                  window.open(`/${session.user.username}`, "_blank");
                } else {
                  alert("–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –î–∞—Ö–∏–Ω –Ω—ç–≤—Ç—ç—Ä–Ω—ç “Ø“Ø.");
                }
              } else {
                setActivePage(item.id);
                onItemClick?.(item.id);
              }
            }}
          >
            <item.icon className="w-4 h-4 mr-3" />
            {item.label}
            {item.externalIcon && (
              <item.externalIcon className="w-3 h-3 ml-auto" />
            )}
          </Button>
        ))}
      </nav>
      <div className="p-4 border-t">
        <Button
          variant="ghost"
          className="w-full justify-start text-red-600 hover:text-red-700 hover:bg-red-50"
        >
          <LogOut className="w-4 h-4 mr-3" />
          –ì–∞—Ä–∞—Ö
        </Button>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {" "}
      {/* Mobile Header */}
      <div className="lg:hidden bg-white border-b border-gray-200 p-4 flex items-center justify-between">
        <Sheet>
          <SheetTrigger asChild>
            <Button variant="ghost" size="icon">
              <Menu className="h-6 w-6" />
            </Button>
          </SheetTrigger>
          <SheetContent side="left" className="w-80 p-0">
            <SidebarContent />
          </SheetContent>
        </Sheet>

        <h1 className="text-lg font-semibold">Dashboard</h1>

        {/* Mobile Profile Menu */}
        <div className="relative" ref={dropdownRef}>
          <Button
            variant="outline"
            className="relative cursor-pointer flex justify-center items-center pl-2 pr-1 border border-gray-200 hover:bg-gray-50 rounded-full h-10"
            onClick={toggleDropdown}
          >
            <div className="w-7 h-7 rounded-full bg-gray-200 flex items-center justify-center overflow-hidden">
              {session?.user?.image ? (
                <Image
                  src={session.user.image}
                  alt={userData?.username || session?.user?.username || "User"}
                  width={28}
                  height={28}
                  className="w-full h-full object-cover"
                  loading="lazy"
                  decoding="async"
                  draggable="false"
                />
              ) : (
                <Coffee className="w-4 h-4 text-gray-400" />
              )}
            </div>
          </Button>

          {/* Mobile Dropdown Menu */}
          {isDropdownOpen && (
            <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg border border-gray-200 py-1 z-50">
              <button
                onClick={handleDashboard}
                className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
              >
                <User className="mr-3 w-4 h-4" />
                Dashboard
              </button>
              <button
                onClick={handleLogout}
                className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
              >
                <LogOut className="mr-3 w-4 h-4" />
                Logout
              </button>
            </div>
          )}
        </div>
      </div>
      <div className="flex">
        {/* Desktop Sidebar */}
        <div className="hidden lg:block w-80 bg-white border-r border-gray-200 min-h-screen">
          <SidebarContent />
        </div>

        {/* Main Content */}
        <div className="flex-1 p-4 lg:p-8">
          {/* Desktop Header with Profile Menu */}
          <div className="hidden lg:flex justify-end mb-4">
            {/* Profile Menu */}
            <div className="relative" ref={dropdownRef}>
              <Button
                variant="outline"
                className="relative cursor-pointer flex justify-center items-center pl-2 pr-1 border border-gray-200 hover:bg-gray-50 rounded-full h-10"
                onClick={toggleDropdown}
              >
                <Menu className="mr-2 w-5 h-5 text-gray-600" />
                <div className="w-7 h-7 rounded-full bg-gray-200 flex items-center justify-center overflow-hidden">
                  {session?.user?.image ? (
                    <Image
                      src={session.user.image}
                      alt={
                        userData?.username || session?.user?.username || "User"
                      }
                      width={28}
                      height={28}
                      className="w-full h-full object-cover"
                      loading="lazy"
                      decoding="async"
                      draggable="false"
                    />
                  ) : (
                    <Coffee className="w-4 h-4 text-gray-400" />
                  )}
                </div>
              </Button>

              {/* Dropdown Menu */}
              {isDropdownOpen && (
                <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg border border-gray-200 py-1 z-50">
                  <button
                    onClick={handleDashboard}
                    className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
                  >
                    <User className="mr-3 w-4 h-4" />
                    Dashboard
                  </button>
                  <button
                    onClick={handleLogout}
                    className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
                  >
                    <LogOut className="mr-3 w-4 h-4" />
                    Logout
                  </button>
                </div>
              )}
            </div>
          </div>

          {/* Header */}
          <div className="mb-8">
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É! üëã
            </h1>
            <p className="text-gray-600">”®–Ω”©”©–¥—Ä–∏–π–Ω “Ø—Ä –¥“Ø–Ω–≥—ç—ç —Ö–∞—Ä—Ü–≥–∞–∞—è</p>
          </div>

          <div className="flex justify-center">
            <div className="w-full max-w-2xl space-y-6">
              {/* Statistics Cards */}
              <div className="space-y-4">
                {/* User Profile Card */}
                <Card>
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      {" "}
                      <div className="flex items-center space-x-4">
                        {" "}
                        <Avatar className="h-12 w-12">
                          <AvatarImage
                            src={
                              userData?.profileImage ||
                              session?.user?.image ||
                              "/user-photo.jpg"
                            }
                          />{" "}
                          <AvatarFallback className="bg-yellow-500 text-white text-lg">
                            {(userData?.name || session?.user?.name)
                              ?.charAt(0)
                              ?.toUpperCase() || "–•"}
                          </AvatarFallback>
                        </Avatar>{" "}
                        <div>
                          <h3 className="text-lg font-semibold text-gray-900">
                            {userData?.name ||
                              session?.user?.name ||
                              "–•—ç—Ä—ç–≥–ª—ç–≥—á"}
                          </h3>{" "}
                          <p className="text-sm text-blue-600 hover:text-blue-800 cursor-pointer">
                            {userData?.username || session?.user?.username
                              ? `buymecoffee.com/${
                                  userData?.username || session?.user?.username
                                }`
                              : "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä —Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π"}
                          </p>
                        </div>
                      </div>
                      <Button className="bg-yellow-500 hover:bg-yellow-600 text-white">
                        <Share className="ml-2 h-4 w-4" />
                        –•—É–≤–∞–∞–ª—Ü–∞—Ö
                      </Button>
                    </div>
                    <div className="flex items-center justify-start mt-4 space-x-6">
                      <h3>Earnings</h3>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="outline" className="text-gray-700">
                            <div>–ù–∏–π—Ç</div>
                            <ArrowDown className="ml-2 h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem>–°“Ø“Ø–ª–∏–π–Ω 30 ”©–¥”©—Ä</DropdownMenuItem>
                          <DropdownMenuItem> –°“Ø“Ø–ª–∏–π–Ω 90 ”©–¥”©—Ä</DropdownMenuItem>
                          <DropdownMenuItem>–ù–∏–π—Ç</DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>{" "}
                    </div>
                  </CardContent>
                </Card>

                {/* Statistics Grid */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {/* Total Coffees */}
                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">
                        –ù–∏–π—Ç –∫–æ—Ñ–µ
                      </CardTitle>
                      <Coffee className="h-4 w-4 text-yellow-600" />
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">
                        {isLoading ? "..." : userData?.totalCoffees || 0}
                      </div>
                      <p className="text-xs text-muted-foreground">
                        +2 —ç–Ω—ç —Å–∞—Ä—ã–Ω
                      </p>
                    </CardContent>
                  </Card>

                  {/* Total Earnings */}
                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">
                        –ù–∏–π—Ç –æ—Ä–ª–æ–≥–æ
                      </CardTitle>
                      <TrendingUp className="h-4 w-4 text-green-600" />
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">
                        {isLoading
                          ? "..."
                          : `‚ÇÆ${
                              userData?.totalEarnings?.toLocaleString() || 0
                            }`}
                      </div>
                      <p className="text-xs text-muted-foreground">
                        +‚ÇÆ{userData?.coffeePrice || 5000} —Å“Ø“Ø–ª–∏–π–Ω –∫–æ—Ñ–µ
                      </p>
                    </CardContent>
                  </Card>

                  {/* Coffee Price */}
                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">
                        –ö–æ—Ñ–µ “Ø–Ω—ç
                      </CardTitle>
                      <Badge variant="outline" className="text-yellow-600">
                        –ò–¥—ç–≤—Ö—Ç—ç–π
                      </Badge>
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">
                        {isLoading
                          ? "..."
                          : `‚ÇÆ${
                              userData?.coffeePrice?.toLocaleString() || 5000
                            }`}
                      </div>
                      <p className="text-xs text-muted-foreground">
                        –ö–æ—Ñ–µ —Ç—É—Ç–∞–º–¥
                      </p>
                    </CardContent>
                  </Card>
                </div>
              </div>

              {/* Recent Supporters */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Heart className="h-5 w-5 text-red-500 mr-2" />
                    –°“Ø“Ø–ª–∏–π–Ω –¥—ç–º–∂–∏–≥—á–∏–¥
                  </CardTitle>
                  <CardDescription>
                    –¢–∞–Ω–¥ —Å–∞—è—Ö–∞–Ω –¥—ç–º–∂–ª—ç–≥ “Ø–∑“Ø“Ø–ª—Å—ç–Ω —Ö“Ø–º“Ø“Ø—Å
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {recentSupporters.map((supporter, index) => (
                    <div key={index} className="flex items-start space-x-3">
                      <Avatar className="h-10 w-10">
                        <AvatarImage src="" />
                        <AvatarFallback className="bg-yellow-500 text-white">
                          {supporter.avatar}
                        </AvatarFallback>
                      </Avatar>
                      <div className="flex-1 space-y-1">
                        <div className="flex items-center justify-between">
                          <h4 className="text-sm font-medium">
                            {supporter.name}
                          </h4>
                          <Badge
                            variant="secondary"
                            className="bg-green-100 text-green-800"
                          >
                            {supporter.amount}
                          </Badge>
                        </div>
                        <p className="text-sm text-gray-600">
                          {supporter.message}
                        </p>
                        <p className="text-xs text-gray-400">
                          {supporter.time}
                        </p>
                      </div>
                    </div>
                  ))}
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
