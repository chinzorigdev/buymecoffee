// –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –ø—Ä–æ—Ñ–∞–π–ª –º—ç–¥—ç—ç–ª—ç–ª —à–∏–Ω—ç—á–ª—ç—Ö API
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { connectToDatabase } from "@/lib/mongodb";
import { User } from "@/models/User";

/**
 * PATCH /api/user/update-profile
 * –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –ø—Ä–æ—Ñ–∞–π–ª –º—ç–¥—ç—ç–ª—ç–ª —à–∏–Ω—ç—á–ª—ç—Ö
 */
export async function PATCH(request: NextRequest) {
  try {
    // Session —à–∞–ª–≥–∞—Ö
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json(
        {
          success: false,
          message: "–ù—ç–≤—Ç—Ä—ç—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π",
        },
        { status: 401 }
      );
    } // Request body –∞–≤–∞—Ö
    const body = await request.json();
    const {
      userId,
      name,
      about,
      website,
      profileImage,
      needsProfileCompletion,
    } = body;

    // –•—ç—Ä—ç–≥–ª—ç–≥—á ”©”©—Ä–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –ª –∑–∞—Å–∞—Ö —ç—Ä—Ö—Ç—ç–π
    if (session.user.id !== userId) {
      return NextResponse.json(
        {
          success: false,
          message: "–ó”©–≤—Ö”©–Ω ”©”©—Ä–∏–π–Ω –ø—Ä–æ—Ñ–∞–π–ª—ã–≥ –∑–∞—Å–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π",
        },
        { status: 403 }
      );
    }

    console.log(`üë§ –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –ø—Ä–æ—Ñ–∞–π–ª —à–∏–Ω—ç—á–ª—ç–∂ –±–∞–π–Ω–∞: ${userId}`);

    // MongoDB-—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ—Ö
    await connectToDatabase();

    // –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ –æ–ª–∂ —à–∏–Ω—ç—á–ª—ç—Ö
    const user = await User.findById(userId);

    if (!user) {
      return NextResponse.json(
        {
          success: false,
          message: "–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π",
        },
        { status: 404 }
      );
    }

    // –ú—ç–¥—ç—ç–ª—ç–ª —à–∏–Ω—ç—á–ª—ç—Ö
    if (name) user.name = name.trim();
    if (about !== undefined) user.about = about.trim();
    if (website) {
      // URL —Ñ–æ—Ä–º–∞—Ç—ã–≥ —à–∞–ª–≥–∞—Ö
      if (website.trim() && !website.startsWith("http")) {
        user.website = `https://${website.trim()}`;
      } else {
        user.website = website.trim();
      }
    }
    if (profileImage) user.profileImage = profileImage;

    // –•–∞–¥–≥–∞–ª–∞—Ö
    const updatedUser = await user.save();

    console.log(`‚úÖ –ü—Ä–æ—Ñ–∞–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç: ${updatedUser.username}`);

    // Response
    return NextResponse.json({
      success: true,
      message: "–ü—Ä–æ—Ñ–∞–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç",
      user: {
        id: updatedUser._id.toString(),
        username: updatedUser.username,
        email: updatedUser.email,
        name: updatedUser.name,
        about: updatedUser.about,
        website: updatedUser.website,
        profileImage: updatedUser.profileImage,
        updatedAt: updatedUser.updatedAt,
      },
    });
  } catch (error) {
    console.error("‚ùå Profile update –∞–ª–¥–∞–∞:", error);

    return NextResponse.json(
      {
        success: false,
        message: "–ü—Ä–æ—Ñ–∞–π–ª —à–∏–Ω—ç—á–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞",
        error: error instanceof Error ? error.message : "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π –∞–ª–¥–∞–∞",
      },
      { status: 500 }
    );
  }
}

/**
 * GET /api/user/update-profile
 * –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –æ–¥–æ–æ–≥–∏–π–Ω –ø—Ä–æ—Ñ–∞–π–ª –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
 */
export async function GET(request: NextRequest) {
  try {
    // Session —à–∞–ª–≥–∞—Ö
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json(
        {
          success: false,
          message: "–ù—ç–≤—Ç—Ä—ç—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π",
        },
        { status: 401 }
      );
    } // MongoDB-—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ—Ö
    await connectToDatabase(); // –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö - Google ID —ç—Å–≤—ç–ª MongoDB ObjectId-—ç—ç—Ä —Ö–∞–π—Ö
    let user;
    try {
      // –≠—Ö–ª—ç—ç–¥ MongoDB ObjectId –≥—ç–∂ “Ø–∑—ç—ç–¥ —Ö–∞–π—Ö
      user = await User.findById(session.user.id);
    } catch {
      // –•—ç—Ä—ç–≤ ObjectId –±–∏—à –±–æ–ª Google ID –≥—ç–∂ “Ø–∑—ç—ç–¥ —Ö–∞–π—Ö
      console.log("üîç Google ID-—ç—ç—Ä —Ö—ç—Ä—ç–≥–ª—ç–≥—á —Ö–∞–π–∂ –±–∞–π–Ω–∞:", session.user.id);
      user = await User.findOne({ googleId: session.user.id });
    }

    if (!user) {
      console.log("‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π:", {
        sessionUserId: session.user.id,
        sessionUserEmail: session.user.email,
        message: "Session-–¥ –±–∞–π–≥–∞–∞ ID-—ç—ç—Ä —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π",
      });

      return NextResponse.json(
        {
          success: false,
          message: "–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π",
          debug: {
            sessionUserId: session.user.id,
            sessionUserEmail: session.user.email,
          },
        },
        { status: 404 }
      );
    }

    return NextResponse.json({
      success: true,
      user: {
        id: user._id.toString(),
        username: user.username,
        email: user.email,
        name: user.name,
        about: user.about,
        website: user.website,
        profileImage: user.profileImage,
        coffeePrice: user.coffeePrice,
        totalCoffees: user.totalCoffees,
        totalEarnings: user.totalEarnings,
      },
    });
  } catch (error) {
    console.error("‚ùå Profile fetch –∞–ª–¥–∞–∞:", error);

    return NextResponse.json(
      {
        success: false,
        message: "–ü—Ä–æ—Ñ–∞–π–ª –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞",
        error: error instanceof Error ? error.message : "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π –∞–ª–¥–∞–∞",
      },
      { status: 500 }
    );
  }
}
