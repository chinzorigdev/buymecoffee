// MongoDB —Ö–æ–ª–±–æ–ª—Ç—ã–≥ —Ç–µ—Å—Ç —Ö–∏–π—Ö API endpoint
import { NextRequest, NextResponse } from "next/server";
import { connectToDatabase } from "@/lib/mongodb";
import { User } from "@/models/User";

/**
 * GET /api/test-db
 * MongoDB —Ö–æ–ª–±–æ–ª—Ç –±–æ–ª–æ–Ω User model-–∏–π–≥ —Ç–µ—Å—Ç —Ö–∏–π—Ö
 */
export async function GET(request: NextRequest) {
  try {
    console.log("üîç MongoDB —Ö–æ–ª–±–æ–ª—Ç—ã–≥ —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...");

    // MongoDB-—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ—Ö
    await connectToDatabase();
    console.log("‚úÖ MongoDB —Ö–æ–ª–±–æ–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π");

    // –•—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–Ω —Ç–æ–æ–≥ —Ç–æ–æ–ª–æ—Ö
    const userCount = await User.countDocuments();
    console.log(`üìä –ù–∏–π—Ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ç–æ–æ: ${userCount}`);

    // –°“Ø“Ø–ª–∏–π–Ω 5 —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ –∞–≤–∞—Ö
    const recentUsers = await User.find({})
      .select("username email createdAt providers")
      .sort({ createdAt: -1 })
      .limit(5);

    return NextResponse.json({
      success: true,
      message: "MongoDB —Ö–æ–ª–±–æ–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞",
      data: {
        userCount,
        recentUsers,
        timestamp: new Date().toISOString(),
      },
    });
  } catch (error) {
    console.error("‚ùå MongoDB —Ç–µ—Å—Ç –∞–ª–¥–∞–∞:", error);

    return NextResponse.json(
      {
        success: false,
        message: "MongoDB —Ö–æ–ª–±–æ–ª—Ç–æ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞",
        error: error instanceof Error ? error.message : "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π –∞–ª–¥–∞–∞",
      },
      { status: 500 }
    );
  }
}
