import { NextAuthOptions } from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import FacebookProvider from "next-auth/providers/facebook";
import TwitterProvider from "next-auth/providers/twitter";
import CredentialsProvider from "next-auth/providers/credentials";
import { connectToDatabase } from "./mongodb";
import { User, IUser } from "@/models/User";

export const authOptions: NextAuthOptions = {
  pages: {
    error: "/auth/error", // Custom error page
    signIn: "/signin",
    signOut: "/signin",
  },
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
    FacebookProvider({
      clientId: process.env.FACEBOOK_CLIENT_ID!,
      clientSecret: process.env.FACEBOOK_CLIENT_SECRET!,
    }),
    TwitterProvider({
      clientId: process.env.TWITTER_CLIENT_ID!,
      clientSecret: process.env.TWITTER_CLIENT_SECRET!,
    }),
    CredentialsProvider({
      name: "credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" },
        username: { label: "Username", type: "text" },
        isSignup: { label: "Is Signup", type: "text" }, // –ë“Ø—Ä—Ç–≥—ç–ª —ç—Å—ç—Ö —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          console.log("‚ùå –ò–º—ç–π–ª —ç—Å–≤—ç–ª –Ω—É—É—Ü “Ø–≥ –±–∞–π—Ö–≥“Ø–π");
          return null;
        }

        try {
          // MongoDB-—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ—Ö
          await connectToDatabase();

          const isSignup = credentials.isSignup === "true";

          if (isSignup) {
            // –ë“Æ–†–¢–ì–≠–õ: –®–∏–Ω—ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á “Ø“Ø—Å–≥—ç—Ö
            console.log("üìù –®–∏–Ω—ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á –±“Ø—Ä—Ç–≥—ç–∂ –±–∞–π–Ω–∞:", credentials.email);

            // –ò–º—ç–π–ª –¥–∞–≤—Ö—Ü–∞–∂ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
            const existingUser = await User.findByEmail(credentials.email);
            if (existingUser) {
              console.log(
                "‚ùå –ò–º—ç–π–ª –∞–ª—å —Ö—ç–¥–∏–π–Ω –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω:",
                credentials.email
              );
              throw new Error("–≠–Ω—ç –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞—Ä –∞–ª—å —Ö—ç–¥–∏–π–Ω –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞");
            }

            // Username –¥–∞–≤—Ö—Ü–∞–∂ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
            if (credentials.username) {
              const existingUsername = await User.findByUsername(
                credentials.username
              );
              if (existingUsername) {
                console.log(
                  "‚ùå Username –∞–ª—å —Ö—ç–¥–∏–π–Ω –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω:",
                  credentials.username
                );
                throw new Error(
                  "–≠–Ω—ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä –∞–ª—å —Ö—ç–¥–∏–π–Ω –∞—à–∏–≥–ª–∞–≥–¥–∞–∂ –±–∞–π–Ω–∞"
                );
              }
            }

            // Username “Ø“Ø—Å–≥—ç—Ö —ç—Å–≤—ç–ª –∞—à–∏–≥–ª–∞—Ö
            const username =
              credentials.username ||
              credentials.email
                .split("@")[0]
                .toLowerCase()
                .replace(/[^a-z0-9]/g, "");

            // –®–∏–Ω—ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á “Ø“Ø—Å–≥—ç—Ö
            const newUser = new User({
              email: credentials.email,
              password: credentials.password, // Pre-save middleware –Ω—å hash —Ö–∏–π–Ω—ç
              username: username,
              name: credentials.username || username,
              providers: ["credentials"],
            });

            const savedUser = await newUser.save();
            console.log(
              "‚úÖ –®–∏–Ω—ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á –∞–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç:",
              savedUser.email
            );

            return {
              id: savedUser._id.toString(),
              email: savedUser.email,
              name: savedUser.name,
              username: savedUser.username,
              image: savedUser.profileImage,
            };
          } else {
            // –ù–≠–í–¢–†–≠–•: –û–¥–æ–æ –±–∞–π–≥–∞–∞ —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ —à–∞–ª–≥–∞—Ö
            console.log("üîê –•—ç—Ä—ç–≥–ª—ç–≥—á –Ω—ç–≤—Ç—ç—Ä—á –±–∞–π–Ω–∞:", credentials.email);

            // –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ –æ–ª–æ—Ö (password –æ—Ä—É—É–ª–ª—Ç —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π)
            const user = await User.findOne({
              email: credentials.email,
            }).select("+password");

            if (!user) {
              console.log("‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π:", credentials.email);
              return null;
            }

            // –ù—É—É—Ü “Ø–≥ —à–∞–ª–≥–∞—Ö
            const isValidPassword = await user.comparePassword(
              credentials.password
            );
            if (!isValidPassword) {
              console.log("‚ùå –ù—É—É—Ü “Ø–≥ –±—É—Ä—É—É:", credentials.email);
              return null;
            }

            // –°“Ø“Ø–ª–∏–π–Ω –Ω—ç–≤—Ç—Ä—ç—Ö –æ–≥–Ω–æ–æ–≥ —à–∏–Ω—ç—á–ª—ç—Ö
            await user.updateLastLogin();

            console.log("‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–≤—Ç—ç—Ä–ª—ç—ç:", user.email);

            return {
              id: user._id.toString(),
              email: user.email,
              name: user.name,
              username: user.username,
              image: user.profileImage,
            };
          }
        } catch (error) {
          console.error("üí• Authorize –∞–ª–¥–∞–∞:", error);
          return null;
        }
      },
    }),
  ],
  session: {
    strategy: "jwt",
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.username = user.username;
        token.isNewUser = user.isNewUser || false;
      }
      return token;
    },
    async session({ session, token }) {
      if (token && session.user) {
        session.user.id = token.id as string;
        session.user.username = token.username as string;
        session.user.isNewUser = token.isNewUser as boolean;
      }
      return session;
    },
    async signIn({ user, account, profile }) {
      try {
        await connectToDatabase();

        if (account?.provider === "google") {
          console.log("üîç Google OAuth –Ω—ç–≤—Ç—Ä—ç–ª—Ç:", profile?.email); // Google ID –∞—à–∏–≥–ª–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á —Ö–∞–π—Ö
          let existingUser = (await User.findOne({
            googleId: user.id,
          })) as IUser | null;

          let isNewUser = false;

          if (!existingUser) {
            // –ò–º—ç–π–ª—ç—ç—Ä —Ö–∞–π—Ö (Google account-–≥ –æ–¥–æ–æ –±–∞–π–≥–∞–∞ account-—Ç–∞–π —Ö–æ–ª–±–æ—Ö)
            existingUser = (await User.findByEmail(
              user.email!
            )) as IUser | null;

            if (existingUser) {
              // –û–¥–æ–æ –±–∞–π–≥–∞–∞ –∞–∫–∫–∞—É–Ω—Ç–∞–¥ Google provider –Ω—ç–º—ç—Ö
              console.log("üîó Google-–≥ –æ–¥–æ–æ –±–∞–π–≥–∞–∞ –∞–∫–∫–∞—É–Ω—Ç—Ç–∞–π —Ö–æ–ª–±–æ–∂ –±–∞–π–Ω–∞");
              existingUser.googleId = user.id;
              if (!existingUser.providers.includes("google")) {
                existingUser.providers.push("google");
              }
              // –ü—Ä–æ—Ñ–∞–π–ª –∑—É—Ä–≥–∏–π–≥ —à–∏–Ω—ç—á–ª—ç—Ö (—Ö—ç—Ä—ç–≤ –±–∞–π—Ö–≥“Ø–π –±–æ–ª)
              if (!existingUser.profileImage && user.image) {
                existingUser.profileImage = user.image;
              }
              await existingUser.save();
            } else {
              // –®–∏–Ω—ç Google —Ö—ç—Ä—ç–≥–ª—ç–≥—á “Ø“Ø—Å–≥—ç—Ö
              console.log("üë§ –®–∏–Ω—ç Google —Ö—ç—Ä—ç–≥–ª—ç–≥—á “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞");
              isNewUser = true;

              // Username “Ø“Ø—Å–≥—ç—Ö - –°–∞–π–∂—Ä—É—É–ª—Å–∞–Ω –ª–æ–≥–∏–∫
              let username = generateUsernameFromEmail(user.email!);

              // Username –¥–∞–≤—Ö—Ü–∞–∂–≥“Ø–π –±–∞–π—Ö—ã–≥ —à–∞–ª–≥–∞—Ö
              username = await ensureUniqueUsername(username);

              existingUser = new User({
                email: user.email,
                name: user.name,
                username: username,
                profileImage: user.image,
                googleId: user.id,
                providers: ["google"],
                isVerified: true, // Google –∞–∫–∫–∞—É–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä –±–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω
                // –®–∏–Ω—ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ complete-your-page —Ä—É—É —à–∏–ª–∂“Ø“Ø–ª—ç—Ö–∏–π–≥ —Ç—ç–º–¥—ç–≥–ª—ç—Ö
                needsProfileCompletion: true,
              });

              await existingUser.save();
              console.log(
                "‚úÖ –®–∏–Ω—ç Google —Ö—ç—Ä—ç–≥–ª—ç–≥—á “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç:",
                existingUser.email
              );
            }
          }

          // –°“Ø“Ø–ª–∏–π–Ω –Ω—ç–≤—Ç—Ä—ç—Ö –æ–≥–Ω–æ–æ–≥ —à–∏–Ω—ç—á–ª—ç—Ö
          await existingUser.updateLastLogin();

          // User –æ–±—ä–µ–∫—Ç–æ–¥ MongoDB-–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –Ω—ç–º—ç—Ö
          user.id = existingUser._id.toString();
          user.username = existingUser.username;
          user.name = existingUser.name;

          // –®–∏–Ω—ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á —ç—Å—ç—Ö–∏–π–≥ —Ç—ç–º–¥—ç–≥–ª—ç—Ö
          user.isNewUser = isNewUser;

          return true;
        }

        // –ë—É—Å–∞–¥ provider-“Ø“Ø–¥ (Facebook, Twitter)
        if (account?.provider === "facebook") {
          // Facebook –ª–æ–≥–∏–∫ (–∏–∂–∏–ª –∑–∞—Ä—á–º–∞–∞—Ä)
          console.log("üìò Facebook OAuth –Ω—ç–≤—Ç—Ä—ç–ª—Ç");
          // TODO: Facebook provider –ª–æ–≥–∏–∫ –Ω—ç–º—ç—Ö
        }

        return true;
      } catch (error) {
        console.error("üí• SignIn callback –∞–ª–¥–∞–∞:", error);
        return false;
      }
    },
    async redirect({ url, baseUrl }) {
      // OAuth-–∞–∞—Å –∏—Ä—Å—ç–Ω redirect-–∏–π–≥ –∑–æ—Ö–∏—Ü—É—É–ª–∞—Ö
      console.log("üîÑ Redirect callback:", { url, baseUrl });

      // –•—ç—Ä—ç–≤ complete-your-page —Ö—É—É–¥–∞—Å–Ω–∞–∞—Å –∏—Ä—Å—ç–Ω –±–æ–ª, —Ç—É—Ö–∞–π–Ω —Ö—É—É–¥—Å–∞–Ω–¥ “Ø–ª–¥—ç—Ö
      if (url.includes("complete-your-page")) {
        return `${baseUrl}/complete-your-page`;
      }

      // –•—ç—Ä—ç–≤ signin —Ö—É—É–¥–∞—Å–Ω–∞–∞—Å –∏—Ä—Å—ç–Ω –±–æ–ª:
      // - –®–∏–Ω—ç Google —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ complete-your-page —Ä—É—É
      // - –û–¥–æ–æ –±–∞–π–≥–∞–∞ —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ dashboard —Ä—É—É
      if (url.includes("signin")) {
        // URL-–¥ callbackUrl –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        const urlObj = new URL(url, baseUrl);
        const callbackUrl = urlObj.searchParams.get("callbackUrl");

        if (callbackUrl && callbackUrl.includes("complete-your-page")) {
          return `${baseUrl}/complete-your-page`;
        }

        // Google OAuth-–Ω —Ö—É–≤—å–¥ session-–∞–∞—Å —à–∏–Ω—ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        // (–≠–Ω—ç –Ω—å JWT callback –¥—ç—ç—Ä —Ç–æ—Ö–∏—Ä—É—É–ª–∞–≥–¥—Å–∞–Ω –±–∞–π—Ö —ë—Å—Ç–æ–π)
        return `${baseUrl}/dashboard`;
      }

      // Dashboard —Ö–∞–Ω–¥–∞–ª—Ç - —à–∏–Ω—ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ complete-your-page —Ä—É—É —à–∏–ª–∂“Ø“Ø–ª—ç—Ö
      if (url.includes("dashboard")) {
        return `${baseUrl}/dashboard`;
      }

      // “Æ–Ω–¥—Å—ç–Ω —Ö—É—É–¥–∞—Å —Ä—É—É –±—É—Ü–∞—Ö
      if (url.startsWith("/")) return `${baseUrl}${url}`;
      if (new URL(url).origin === baseUrl) return url;

      // Default: Dashboard —Ä—É—É —à–∏–ª–∂“Ø“Ø–ª—ç—Ö
      return `${baseUrl}/dashboard`;
    },
  },
};

// Helper functions - Enhanced Username Generation
function generateUsernameFromEmail(email: string): string {
  const localPart = email.split("@")[0];

  // 1. Clean and normalize the local part
  let username = localPart
    .toLowerCase()
    .trim()
    // Remove dots and plus signs (common in emails)
    .replace(/[\.+]/g, "")
    // Replace non-alphanumeric characters with underscores
    .replace(/[^a-z0-9]/g, "_")
    // Remove consecutive underscores
    .replace(/_+/g, "_")
    // Remove leading/trailing underscores
    .replace(/^_+|_+$/g, "");

  // 2. Handle edge cases
  if (!username || username.length < 3) {
    // Generate readable random username if email local part is too short
    const adjectives = [
      "cool",
      "smart",
      "happy",
      "bright",
      "quick",
      "nice",
      "swift",
      "bold",
    ];
    const nouns = [
      "user",
      "creator",
      "maker",
      "builder",
      "artist",
      "writer",
      "coder",
      "dreamer",
    ];

    const randomAdjective =
      adjectives[Math.floor(Math.random() * adjectives.length)];
    const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];
    const randomNum = Math.floor(Math.random() * 99) + 1;

    username = `${randomAdjective}_${randomNoun}_${randomNum}`;
  }

  // 3. Ensure reasonable length (3-20 characters)
  if (username.length > 20) {
    // Truncate but try to keep it readable
    username = username.substring(0, 17) + Math.floor(Math.random() * 100);
  }

  // 4. Ensure it doesn't end with underscore
  username = username.replace(/_+$/, "");

  // 5. Final fallback
  if (username.length < 3) {
    username = "user_" + Math.random().toString(36).substring(2, 8);
  }

  return username;
}

async function ensureUniqueUsername(baseUsername: string): Promise<string> {
  let username = baseUsername;
  let counter = 1;

  // First, check if the base username is available
  if (!(await User.findByUsername(username))) {
    return username;
  }

  // Try different variations to make it unique
  while (await User.findByUsername(username)) {
    if (counter === 1) {
      // First attempt: add random suffix
      const randomSuffix = Math.random().toString(36).substring(2, 4);
      username = `${baseUsername}_${randomSuffix}`;
    } else if (counter <= 10) {
      // Next attempts: add incremental numbers
      username = `${baseUsername}_${counter}`;
    } else {
      // After 10 attempts: use timestamp-based unique name
      const timestamp = Date.now().toString(36);
      username = `${baseUsername.substring(0, 10)}_${timestamp}`;
      break;
    }

    counter++;

    // Safety net to prevent infinite loops
    if (counter > 50) {
      username = `user_${Date.now().toString(36)}_${Math.random()
        .toString(36)
        .substring(2, 4)}`;
      break;
    }
  }

  return username;
}
