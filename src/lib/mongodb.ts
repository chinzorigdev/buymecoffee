// MongoDB —Ö–æ–ª–±–æ–ª—Ç—ã–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ
import mongoose from "mongoose";

// Global-–¥ cached —Ö–æ–ª–±–æ–ª—Ç —Ö–∞–¥–≥–∞–ª–∞—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
interface CachedConnection {
  conn: typeof mongoose | null;
  promise: Promise<typeof mongoose> | null;
}

// Global –æ–±—ä–µ–∫—Ç—ã–≥ ”©—Ä–≥”©—Ç–≥”©—Ö
declare global {
  // eslint-disable-next-line no-var
  var mongoose: CachedConnection | undefined;
}

// MongoDB —Ö–æ–ª–±–æ–ª—Ç—ã–Ω string-–∏–π–≥ environment variable-–∞–∞—Å –∞–≤–Ω–∞
const MONGODB_URI = process.env.MONGODB_URI;

// MongoDB —Ö–æ–ª–±–æ–ª—Ç—ã–Ω —Ç”©–ª–≤–∏–π–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö –≥–ª–æ–±–∞–ª ”©”©—Ä—á–ª”©–≥—á
let cached = global.mongoose;

// –•—ç—Ä—ç–≤ –≥–ª–æ–±–∞–ª –¥—ç—ç—Ä cached –±–∞–π—Ö–≥“Ø–π –±–æ–ª —à–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç–Ω—ç
if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

/**
 * MongoDB-—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ—Ö —Ñ—É–Ω–∫—Ü
 * –≠–Ω—ç —Ñ—É–Ω–∫—Ü –Ω—å singleton pattern –∞—à–∏–≥–ª–∞–∂,
 * –Ω—ç–≥ —É–¥–∞–∞ –ª —Ö–æ–ª–±–æ–≥–¥–æ–∂, –¥–∞—Ä–∞–∞–≥–∏–π–Ω —É–¥–∞–∞ –¥—É—É–¥–∞—Ö–∞–¥ –∫—ç—à –∞—à–∏–≥–ª–∞–Ω–∞
 */
export async function connectToDatabase() {
  // cached –Ω—å –±–∞–π–Ω–∞ –≥—ç–∂ guaranteed —É—á–∏—Ä null check —Ö–∏–π–∂ –±–∞–π–Ω–∞
  if (!cached) {
    cached = global.mongoose = { conn: null, promise: null };
  }

  // –•—ç—Ä—ç–≤ –∞–ª—å —Ö—ç–¥–∏–π–Ω —Ö–æ–ª–±–æ–≥–¥—Å–æ–Ω –±–∞–π–≤–∞–ª –∫—ç—à—ç—ç—Å –±—É—Ü–∞–∞–Ω–∞
  if (cached.conn) {
    console.log("üîÑ MongoDB: –ö—ç—à—ç—ç—Å —Ö–æ–ª–±–æ–ª—Ç –∞—à–∏–≥–ª–∞–∂ –±–∞–π–Ω–∞");
    return cached.conn;
  }

  // MongoDB URI –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞–Ω–∞
  if (!MONGODB_URI) {
    throw new Error(
      "MONGODB_URI environment variable –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞. .env.local —Ñ–∞–π–ª–¥ –Ω—ç–º–Ω—ç “Ø“Ø!"
    );
  }

  // –•—ç—Ä—ç–≤ promise “Ø“Ø—Å—Å—ç–Ω–≥“Ø–π –±–æ–ª —à–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç–Ω—ç
  if (!cached.promise) {
    console.log("üîå MongoDB-—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ–∂ –±–∞–π–Ω–∞...");

    // Mongoose —Ç–æ—Ö–∏—Ä–≥–æ–æ–Ω—ã —Å–æ–Ω–≥–æ–ª—Ç—É—É–¥
    const opts = {
      bufferCommands: false, // –•–æ–ª–±–æ–ª—Ç —Ö“Ø–ª—ç—ç–ª–≥“Ø–π–≥—ç—ç—Ä –∫–æ–º–∞–Ω–¥ –∏–ª–≥—ç—ç—Ö–≥“Ø–π
      serverSelectionTimeoutMS: 5000, // 5 —Å–µ–∫—É–Ω–¥–∏–π–Ω –¥–æ—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä –æ–ª–æ—Ö
      socketTimeoutMS: 45000, // 45 —Å–µ–∫—É–Ω–¥–∏–π–Ω socket timeout
      family: 4, // IPv4 –∞—à–∏–≥–ª–∞—Ö
    };

    // MongoDB-—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ—Ö promise “Ø“Ø—Å–≥—ç–Ω—ç
    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {
      console.log("‚úÖ MongoDB –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–ª–æ–æ!");
      return mongoose;
    });
  }

  try {
    // Promise-–≥ —Ö“Ø–ª—ç—ç–∂, —Ö–æ–ª–±–æ–ª—Ç—ã–≥ cached-–¥ —Ö–∞–¥–≥–∞–ª–Ω–∞
    cached.conn = await cached.promise;
  } catch (e) {
    // –ê–ª–¥–∞–∞ –≥–∞—Ä–≤–∞–ª promise-–≥ —Ü—ç–≤—ç—Ä–ª—ç–Ω—ç
    cached.promise = null;
    console.error("‚ùå MongoDB —Ö–æ–ª–±–æ–ª—Ç–æ–¥ –∞–ª–¥–∞–∞:", e);
    throw e;
  }

  return cached.conn;
}

/**
 * MongoDB —Ö–æ–ª–±–æ–ª—Ç—ã–≥ —Ç–∞—Å–ª–∞—Ö —Ñ—É–Ω–∫—Ü
 * –ò—Ö—ç–≤—á–ª—ç–Ω production-–¥ –∞—à–∏–≥–ª–∞–≥–¥–¥–∞–≥–≥“Ø–π
 */
export async function disconnectFromDatabase() {
  if (!cached) {
    return;
  }

  if (cached.conn) {
    await mongoose.disconnect();
    cached.conn = null;
    cached.promise = null;
    console.log("üîå MongoDB —Ö–æ–ª–±–æ–ª—Ç —Ç–∞—Å–ª–∞–≥–¥–ª–∞–∞");
  }
}
